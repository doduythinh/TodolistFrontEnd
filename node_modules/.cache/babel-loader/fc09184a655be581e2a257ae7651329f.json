{"ast":null,"code":"var _jsxFileName = \"D:\\\\todolistapplist\\\\src\\\\component\\\\childrenbodytask\\\\listboard\\\\listboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./listboard.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../store/action/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Listboard = () => {\n  _s();\n\n  const [title, setTitle] = useState();\n  const [isClickTitle, setIsClickTitle] = useState(false);\n  let dispatch = useDispatch();\n\n  const changeValueTitle = event => {\n    event.preventDefault();\n    setTitle(event.target.value);\n  };\n\n  const postTaskTitle = async event => {\n    event.preventDefault();\n    let action = actions.AddTask(title);\n    console.log(\"action12312\", action);\n    await dispatch(action);\n    setIsClickTitle(true);\n  };\n\n  const hideValue = () => {\n    setIsClickTitle(false);\n  };\n\n  useEffect(() => {\n    let action = actions.GetTask();\n    dispatch(action);\n  }, []);\n  let listTask = useSelector(state => state.main.listTask);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerListBoard\",\n    children: [listTask.data && listTask.data.map((res, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemadd-task\",\n        children: [isClickTitle && /*#__PURE__*/_jsxDEV(\"input\", {\n          value: res.title,\n          onClick: () => hideValue(),\n          onChange: event => changeValueTitle(event)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 40\n        }, this), !isClickTitle && /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: event => {\n            postTaskTitle(event);\n          },\n          children: res.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 26\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itemadd-task\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: event => {\n          postTaskTitle(event);\n        },\n        children: [isClickTitle && /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"add Task\",\n          name: \"title\",\n          onChange: event => changeValueTitle(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 40\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: event => {\n            postTaskTitle(event);\n          },\n          children: \"Th\\xEAm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Listboard, \"T0YVTz0rahhl9wYA8p6zzKeEJtc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Listboard;\nexport default Listboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Listboard\");","map":{"version":3,"sources":["D:/todolistapplist/src/component/childrenbodytask/listboard/listboard.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","actions","Listboard","title","setTitle","isClickTitle","setIsClickTitle","dispatch","changeValueTitle","event","preventDefault","target","value","postTaskTitle","action","AddTask","console","log","hideValue","GetTask","listTask","state","main","data","map","res","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAA0BC,SAA1B,EAAqCC,QAArC,QAAoD,OAApD;AACA,OAAO,kBAAP;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAO,KAAKC,OAAZ,MAAyB,6BAAzB;;;AACA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBN,QAAQ,EAAjC;AACA,QAAM,CAACO,YAAD,EAAcC,eAAd,IAAiCR,QAAQ,CAAC,KAAD,CAA/C;AACA,MAAIS,QAAQ,GAAIR,WAAW,EAA3B;;AACA,QAAMS,gBAAgB,GAAIC,KAAD,IAAe;AACpCA,IAAAA,KAAK,CAACC,cAAN;AACAN,IAAAA,QAAQ,CAACK,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAR;AACH,GAHD;;AAIA,QAAMC,aAAa,GAAG,MAAOJ,KAAP,IAA+B;AACjDA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAII,MAAM,GAAGb,OAAO,CAACc,OAAR,CAAgBZ,KAAhB,CAAb;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BH,MAA1B;AACA,UAAMP,QAAQ,CAACO,MAAD,CAAd;AACAR,IAAAA,eAAe,CAAC,IAAD,CAAf;AACH,GAND;;AAOA,QAAMY,SAAS,GAAG,MAAM;AACpBZ,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH,GAFD;;AAGAT,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIiB,MAAM,GAAGb,OAAO,CAACkB,OAAR,EAAb;AACAZ,IAAAA,QAAQ,CAACO,MAAD,CAAR;AACH,GAHQ,EAGP,EAHO,CAAT;AAIA,MAAIM,QAAQ,GAAGpB,WAAW,CAAEqB,KAAD,IAAeA,KAAK,CAACC,IAAN,CAAWF,QAA3B,CAA1B;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,eAEQA,QAAQ,CAACG,IAAT,IAAiBH,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAkB,CAACC,GAAD,EAASC,KAAT,KAA0B;AAC3D,0BAAO;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,mBACFrB,YAAY,iBAAI;AAAmB,UAAA,KAAK,EAAEoB,GAAG,CAACtB,KAA9B;AAAqC,UAAA,OAAO,EAAE,MAAKe,SAAS,EAA5D;AAAgE,UAAA,QAAQ,EAAGT,KAAD,IAASD,gBAAgB,CAACC,KAAD;AAAnG,WAAYiB,KAAZ;AAAA;AAAA;AAAA;AAAA,gBADd,EAEF,CAACrB,YAAD,iBAAkB;AAAO,UAAA,OAAO,EAAGI,KAAD,IAAS;AAACI,YAAAA,aAAa,CAACJ,KAAD,CAAb;AAAqB,WAA/C;AAAA,oBAAkDgB,GAAG,CAACtB;AAAtD;AAAA;AAAA;AAAA;AAAA,gBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAID,KALgB,CAFzB,eASI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACI;AAAM,QAAA,QAAQ,EAAGM,KAAD,IAAS;AAACI,UAAAA,aAAa,CAACJ,KAAD,CAAb;AAAqB,SAA/C;AAAA,mBACMJ,YAAY,iBAAK;AAAO,UAAA,WAAW,EAAC,UAAnB;AAA8B,UAAA,IAAI,EAAC,OAAnC;AAA2C,UAAA,QAAQ,EAAGI,KAAD,IAASD,gBAAgB,CAACC,KAAD;AAA9E;AAAA;AAAA;AAAA;AAAA,gBADvB,eAEI;AAAQ,UAAA,OAAO,EAAGA,KAAD,IAAS;AAACI,YAAAA,aAAa,CAACJ,KAAD,CAAb;AAAqB,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CAzCD;;GAAMP,S;UAGcH,W,EAmBDC,W;;;KAtBbE,S;AA2CN,eAAeA,SAAf","sourcesContent":["import React, {FormEvent, useEffect, useState} from 'react';\r\nimport \"./listboard.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport * as actions from \"../../../store/action/index\"\r\nconst Listboard = () => {\r\n    const [title,setTitle] = useState();\r\n    const [isClickTitle,setIsClickTitle] = useState(false as boolean);\r\n    let dispatch =  useDispatch();\r\n    const changeValueTitle = (event:any) => {\r\n        event.preventDefault();\r\n        setTitle(event.target.value)\r\n    }\r\n    const postTaskTitle = async (event:FormEvent<any>) =>{\r\n        event.preventDefault();\r\n        let action = actions.AddTask(title);\r\n        console.log(\"action12312\",action)\r\n        await dispatch(action);\r\n        setIsClickTitle(true)\r\n    }\r\n    const hideValue = () => {\r\n        setIsClickTitle(false)\r\n    }\r\n    useEffect(()=>{\r\n        let action = actions.GetTask();\r\n        dispatch(action);\r\n    },[])\r\n    let listTask = useSelector((state:any) => state.main.listTask);\r\n    return (\r\n        <div className=\"containerListBoard\">\r\n            {\r\n                listTask.data && listTask.data.map((res:any,index:number) => {\r\n                  return <div  className=\"itemadd-task\">\r\n                      {isClickTitle && <input key={index} value={res.title} onClick={()=> hideValue()} onChange={(event)=>changeValueTitle(event)}  />}\r\n                      {!isClickTitle &&  <span  onClick={(event)=>{postTaskTitle(event)}}>{res.title}</span> }\r\n                    </div>\r\n                })\r\n            }\r\n            <div className=\"itemadd-task\">\r\n                <form onSubmit={(event)=>{postTaskTitle(event)}}>\r\n                    { isClickTitle &&  <input placeholder=\"add Task\" name=\"title\" onChange={(event)=>changeValueTitle(event)} />}\r\n                    <button onClick={(event)=>{postTaskTitle(event)}}>ThÃªm</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Listboard;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\todolistapplist\\\\src\\\\component\\\\childrenbodytask\\\\listboard\\\\listboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./listboard.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../store/action/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Listboard = () => {\n  _s();\n\n  const [title, setTitle] = useState();\n  const [isClickTitle, setIsClickTitle] = useState(false);\n  const [order, setOrder] = useState(0);\n  const [indexs, setIndexs] = useState(0);\n  let listTask = useSelector(state => state.main.listTask);\n  let dispatch = useDispatch();\n\n  const changeValueTitle = event => {\n    event.preventDefault();\n    setTitle(event.target.value);\n  };\n\n  const postTaskTitle = async event => {\n    event.preventDefault();\n\n    if (listTask.data) {\n      listTask.data.length += 1;\n      setOrder(listTask.data.length);\n      let action = await actions.AddTask(title, order);\n      await dispatch(action);\n    }\n\n    setIsClickTitle(true);\n  };\n\n  const hideValue = index => {\n    setIndexs(index);\n  };\n\n  const showValue = index => {\n    setIndexs(index);\n  };\n\n  useEffect(() => {\n    let action = actions.GetTask();\n    dispatch(action);\n    setIndexs(0);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerListBoard\",\n    children: [listTask.data && listTask.data.map((res, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemadd-task\",\n        children: indexs === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n          value: res.title,\n          onClick: () => hideValue(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 45\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"itemadd-task__span\",\n          onClick: () => showValue(index),\n          children: res.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 28\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itemadd-task\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: event => {\n          postTaskTitle(event);\n        },\n        children: [isClickTitle && /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"add Task\",\n          name: \"title\",\n          onChange: event => changeValueTitle(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: event => {\n            postTaskTitle(event);\n          },\n          children: \"Th\\xEAm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Listboard, \"gsRtmE7/XuHIfArSak39OUPS8ps=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Listboard;\nexport default Listboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Listboard\");","map":{"version":3,"sources":["D:/todolistapplist/src/component/childrenbodytask/listboard/listboard.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","actions","Listboard","title","setTitle","isClickTitle","setIsClickTitle","order","setOrder","indexs","setIndexs","listTask","state","main","dispatch","changeValueTitle","event","preventDefault","target","value","postTaskTitle","data","length","action","AddTask","hideValue","index","showValue","GetTask","map","res"],"mappings":"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","sourcesContent":["import React, {FormEvent, useEffect, useState} from 'react';\r\nimport \"./listboard.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport * as actions from \"../../../store/action/index\"\r\nimport {isNumber} from \"util\";\r\n\r\nconst Listboard = () => {\r\n    const [title, setTitle] = useState();\r\n    const [isClickTitle, setIsClickTitle] = useState(false as boolean);\r\n    const [order, setOrder] = useState(0 as number);\r\n    const [indexs, setIndexs] = useState(0 as number);\r\n    let listTask = useSelector((state: any) => state.main.listTask);\r\n    let dispatch = useDispatch();\r\n    const changeValueTitle = (event: any) => {\r\n        event.preventDefault();\r\n        setTitle(event.target.value)\r\n    }\r\n    const postTaskTitle = async (event: FormEvent<any>) => {\r\n        event.preventDefault();\r\n        if (listTask.data) {\r\n            listTask.data.length += 1;\r\n            setOrder(listTask.data.length)\r\n            let action = await actions.AddTask(title, order);\r\n            await dispatch(action);\r\n        }\r\n        setIsClickTitle(true)\r\n    }\r\n    const hideValue = (index: number) => {\r\n        setIndexs(index)\r\n    }\r\n    const showValue = (index: number) => {\r\n        setIndexs(index);\r\n    }\r\n    useEffect(() => {\r\n        let action = actions.GetTask();\r\n        dispatch(action);\r\n        setIndexs(0);\r\n    }, [])\r\n    return (\r\n        <div className=\"containerListBoard\">\r\n            {\r\n                listTask.data && listTask.data.map((res: any, index: number) => {\r\n                    return <div className=\"itemadd-task\" key={index}>\r\n                        {indexs === index ? <input key={index} value={res.title} onClick={() => hideValue(index)}/> :\r\n                            <span className=\"itemadd-task__span\" onClick={() => showValue(index)}>{res.title}</span>}\r\n                    </div>\r\n                })\r\n            }\r\n            <div className=\"itemadd-task\">\r\n                <form onSubmit={(event) => {\r\n                    postTaskTitle(event)\r\n                }}>\r\n                    {isClickTitle &&\r\n                    <input placeholder=\"add Task\" name=\"title\" onChange={(event) => changeValueTitle(event)}/>}\r\n                    <button onClick={(event) => {\r\n                        postTaskTitle(event)\r\n                    }}>ThÃªm\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Listboard;\r\n"]},"metadata":{},"sourceType":"module"}